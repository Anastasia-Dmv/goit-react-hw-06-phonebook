{"version":3,"sources":["redux/contact/contact-actions.js","redux/contact/contact-reducer.js","redux/store.js","components/mainTitle/MainTitle.js","components/contactForm/ContactForm.js","components/findContactInput/FindContactInput.js","components/contactListItems/ContactsListItems.js","components/contactsList/ContactsList.js","components/app/App.js","index.js"],"names":["addContact","createAction","name","number","payload","contact","id","uuidv4","deleteContact","changeFilter","saveInStorage","items","createReducer","actionTypes","state","action","filter","combineReducers","store","configureStore","reducer","contacts","contactsReducer","MainTitle","className","ContactForm","formInitialState","alertMessageShow","handleChange","target","value","setState","handleSubmit","evt","preventDefault","props","find","toggleAlert","this","CSSTransition","in","timeout","classNames","unmountOnExit","onClick","onSubmit","type","onChange","placeholder","Component","mapDispathToProps","contactsActions","connect","dispatch","e","contactActions","ownProps","item","console","log","normalizedFilter","toLowerCase","getFilteredContact","includes","TransitionGroup","component","map","key","App","showContacts","appear","filteredContacts","length","onChangeFilter","mapDispatchToProps","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6db9dc85.chunk.js","sourcesContent":["//import actionTypes from \"./contact-types\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { createAction } from \"@reduxjs/toolkit\";\n\nconst addContact = createAction(\"contact/AddContact\", (name, number) => ({\n  payload: {\n    contact: {\n      name: name,\n      number: number,\n      id: uuidv4(),\n    },\n  },\n}));\nconst deleteContact = createAction(\"contact/Delete\");\nconst changeFilter = createAction(\"contact/changeFilter\");\nconst saveInStorage = createAction(\"contact/saveInStorage\");\nexport default { addContact, deleteContact, changeFilter, saveInStorage };\n//=============without toolkit====\n// const addContact = (name, number) => ({\n//   type: actionTypes.ADDCONTACT,\n//   payload: {\n//     contact: {\n//       name: name,\n//       number: number,\n//       id: uuidv4(),\n//     },\n//   },\n// });\n// const deleteContact = (id) => ({\n//   type: actionTypes.DELETE_CONTACT,\n//   payload: {\n//     id,\n//   },\n// });\n\n// const changeFilter = (filter) => ({\n//   type: actionTypes.CHANGE_FILTER,\n//   payload: {\n//     filter,\n//   },\n// });\n","import { combineReducers } from \"redux\";\n//import actionTypes from \"./contact-types\";\nimport actionTypes from \"./contact-actions\";\n\nimport { createReducer } from \"@reduxjs/toolkit\";\n\nconst items = createReducer([], {\n  [actionTypes.addContact]: (state, action) => [\n    ...state,\n    action.payload.contact,\n  ],\n  [actionTypes.deleteContact]: (state, action) =>\n    state.filter((contact) => contact.id !== action.payload),\n  [actionTypes.saveInStorage]: (state, action) => action.payload,\n});\n\nconst filter = createReducer(\"\", {\n  [actionTypes.changeFilter]: (state, action) => action.payload,\n});\n\n// {\n//   contacts: {\n//     items: [],\n//     filter: ''\n//   }\n// }\n// export const items = (state = [], { type, payload }) => {\n//   switch (type) {\n//     case actionTypes.addContact.type:\n//       return [...state, payload.contact];\n//     case actionTypes.deleteContact.type:\n//       return state.filter((contact) => contact.id !== payload);\n//     default:\n//       return state;\n//   }\n// };\n// export const filter = (state = \"\", { type, payload }) => {\n//   switch (type) {\n//     case actionTypes.changeFilter.type:\n//       return payload;\n//     default:\n//       return state;\n//   }\n// };\n\nexport default combineReducers({\n  items,\n  filter,\n});\n","//import { createStore, combineReducers } from \"redux\";\n//import { itemsReducer, filterReducer } from \"./contact/contact-reducer\";\nimport contactsReducer from \"./contact/contact-reducer\";\nimport { configureStore } from \"@reduxjs/toolkit\";\n\nconst store = configureStore({\n  reducer: {\n    contacts: contactsReducer,\n  },\n});\nexport default store;\n\n//=======old version, without toolkit=====\n// const rootReducer = combineReducers({\n//   contacts: contactsReducer,\n//   //   items: itemsReducer,\n//   //   filter: filterReducer,\n// });\n\n// const store = createStore(\n//   rootReducer,\n//   window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n// );\n//=======old version=====\n","import React from 'react';\n\nconst MainTitle = () => {\n  return (\n    <>\n      <h1 className=\"mainTitle\">Phonebook</h1>\n    </>\n  );\n};\nexport default MainTitle;\n","import React, { Component } from \"react\";\nimport { CSSTransition } from \"react-transition-group\";\nimport { connect } from \"react-redux\";\nimport contactsActions from \"../../redux/contact/contact-actions\";\n\nclass ContactForm extends Component {\n  formInitialState = {\n    name: \"\",\n    number: \"\",\n  };\n  state = {\n    ...this.formInitialState,\n    alertMessageShow: false,\n  };\n  handleChange = ({ target }) => {\n    const { name, value } = target;\n    this.setState({ [name]: value });\n  };\n\n  handleSubmit = (evt) => {\n    evt.preventDefault();\n    const { name, number } = this.state;\n\n    const { contacts } = this.props;\n    const existedContact = contacts.find((contact) => contact.name === name);\n    if (existedContact) {\n      this.setState({ alertMessageShow: true });\n      // alert(`${name} is already in contacts`);\n      return this.setState({ ...this.formInitialState });\n    }\n\n    this.props.addContact(name, number);\n    this.setState({ name: \"\", number: \"\" });\n  };\n  toggleAlert = () => {\n    this.setState({ alertMessageShow: false });\n  };\n  render() {\n    const { name, number, alertMessageShow } = this.state;\n\n    return (\n      <section className=\"wrapper\">\n        <CSSTransition\n          in={alertMessageShow}\n          timeout={250}\n          classNames=\"alertFade\"\n          unmountOnExit\n        >\n          <button className=\"alertMessage\" onClick={this.toggleAlert}>\n            <p>Contact already exists</p>\n          </button>\n        </CSSTransition>\n        <form onSubmit={this.handleSubmit} className=\"form\">\n          <label>\n            Name\n            <input\n              className=\"input\"\n              type=\"text\"\n              name=\"name\"\n              value={name}\n              onChange={this.handleChange}\n              placeholder=\"Enter name\"\n            ></input>\n          </label>\n          <label>\n            Number\n            <input\n              className=\"input\"\n              type=\"tel\"\n              value={number}\n              onChange={this.handleChange}\n              name=\"number\"\n              placeholder=\"Enter number\"\n            ></input>\n          </label>\n          <button type=\"submit\" className=\"addContact-button\">\n            Add contact\n          </button>\n        </form>\n      </section>\n    );\n  }\n}\nconst mapStateToProps = (state) => ({\n  contacts: state.contacts.items,\n  filter: state.contacts.filter,\n});\nconst mapDispathToProps = {\n  addContact: contactsActions.addContact,\n};\nexport default connect(mapStateToProps, mapDispathToProps)(ContactForm);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport contactActions from \"../../redux/contact/contact-actions\";\n\nfunction FindContactInput({ value, onChange }) {\n  return (\n    <div className=\"find-input_frame \">\n      <label>\n        <input\n          className=\"input\"\n          type=\"text\"\n          value={value}\n          onChange={onChange}\n        ></input>\n      </label>\n    </div>\n  );\n}\n\n// const mapStateToProps = (state) => {\n//   const { items, filter } = state.contacts;\n\n//   const filteredContacts = items.filter((contact) =>\n//     contact.name.toLowerCase().includes(filter.toLowerCase())\n//   );\n//   return {\n//     contacts: filteredContacts,\n//   };\n// };\nconst mapStateToProps = (state) => ({\n  value: state.contacts.filter,\n});\n// const mapDispatchToProps = (dispatch = {\n//   onChangeFilter: (e) => dispatch(contactActions.changeFilter(e.target.value)),\n//   // contactActions.changeFilter,\n// });\n\nconst mapDispatchToProps = (dispatch) => ({\n  onChange: (e) => dispatch(contactActions.changeFilter(e.target.value)),\n});\nexport default connect(mapStateToProps, mapDispatchToProps)(FindContactInput);\n","import React from \"react\";\n// import { CSSTransition, TransitionGroup } from \"react-transition-group\";\nimport { connect } from \"react-redux\";\nimport contactActions from \"../../redux/contact/contact-actions\";\nconst ContactsListItems = ({ name, number, deleteContact }) => {\n  // render() {\n  //   const {\n  //     contact: { name, id, number },\n  //     deleteContact,\n  //   } = this.props;\n  return (\n    <li className=\"contact\">\n      <span>{name}</span>\n      <span>{number}</span>\n      <button\n        className=\"deleteBtn\"\n        type=\"button\"\n        // id={id}\n        onClick={(e) => deleteContact(e.target.id)}\n      >\n        x\n      </button>\n    </li>\n  );\n};\n// }\nconst mapStateToProps = (state, ownProps) => {\n  const item = state.contacts.items.find((item) => item.id === ownProps.id);\n  console.log(\"item\", item);\n  console.log(\"item\", item);\n  return { ...item };\n};\nconst mapDispatchToPRops = (dispatch, ownProps) => ({\n  deleteContact: () => dispatch(contactActions.deleteContact(ownProps.id)),\n});\nexport default connect(mapStateToProps, mapDispatchToPRops)(ContactsListItems);\n","import React from \"react\";\nimport ContactsListItems from \"../contactListItems/ContactsListItems\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\nimport { connect } from \"react-redux\";\n//import contactActions from \"../../redux/contact/contact-actions\";\n\nconst ContactsList = ({\n  contacts,\n  // deleteContact\n}) => {\n  // render() {\n  //   const { contacts, deleteContact } = this.props;\n  return (\n    <TransitionGroup component=\"ul\" className=\"contacts-list\">\n      {contacts.map(({ id }) => (\n        <CSSTransition\n          key={id}\n          classNames=\"taskList-fade\"\n          timeout={250}\n          unmountOnExit\n        >\n          <ContactsListItems\n            // contact={contact}\n            // key={id}\n            id={id}\n            //deleteContact={() => deleteContact(id)}\n          />\n        </CSSTransition>\n      ))}\n    </TransitionGroup>\n  );\n  //  }\n};\n\nconst mapStateToProps = (state) => {\n  const { items, filter } = state.contacts;\n  const normalizedFilter = filter.toLowerCase();\n\n  const getFilteredContact = items.filter((contact) =>\n    contact.name.toLowerCase().includes(normalizedFilter)\n  );\n  console.log(\"getFilteredContact\", getFilteredContact);\n  return {\n    contacts: getFilteredContact,\n  };\n};\n// const getFilteredContacts = (state) => {\n//   const { items, filter } = state.contacts;\n\n//   const getfilteredContacts = items.filter((contact) =>\n//     contact.name.toLowerCase().includes(filter.toLowerCase())\n//   );\n//   return {\n//     contacts: getfilteredContacts,\n//   };\n// };\n// const mapStateToProps = ({ contacts: { items, filter } }) => ({\n//   contacts: getFilteredContacts(items, filter),\n// });\n// const mapDispatchToProps = {\n//   deleteContact: contactActions.deleteContact,\n// };\n// export default connect(\n//   mapStateToProps\n//   //  mapDispatchToProps\n// )(ContactsList);\n// //export default ContactsList;\nexport default connect(mapStateToProps)(ContactsList);\n","import React, { Component } from \"react\";\n//import { v4 as uuidv4 } from \"uuid\";\nimport { connect } from \"react-redux\";\n//import contactsActions from \"../../redux/contact/contact-actions\";\n\nimport MainTitle from \"../mainTitle/MainTitle\";\nimport ContactForm from \"../contactForm/ContactForm\";\nimport FindContactInput from \"../findContactInput/FindContactInput\";\nimport ContactsList from \"../contactsList/ContactsList\";\nimport { CSSTransition } from \"react-transition-group\";\nimport contactActions from \"../../redux/contact/contact-actions\";\n//import { items } from \"../../redux/contact/contact-reducer\";\n\nclass App extends Component {\n  state = {\n    // contacts: [\n    //   { id: \"id-1\", name: \"Rosie Simpson\", number: \"459-12-56\" },\n    //   { id: \"id-2\", name: \"Hermione Kline\", number: \"443-89-12\" },\n    //   { id: \"id-3\", name: \"Eden Clements\", number: \"645-17-79\" },\n    //   { id: \"id-4\", name: \"Annie Copeland\", number: \"227-91-26\" },\n    // ],\n    // filter: \"\",\n    showContacts: false,\n  };\n\n  // componentDidMount() {\n  //   const persistedContacts = localStorage.getItem(\"contacts\");\n  //   if (persistedContacts) {\n  //     console.log(\"persistedContacts\", persistedContacts);\n  //     this.props.saveInStorage(JSON.parse(persistedContacts));\n  //   }\n  // }\n\n  // componentDidUpdate(prevProps, prevState) {\n  //   if (prevProps.contacts !== this.props.contacts) {\n  //     console.log(\"this.props.contacts\", this.props.contacts);\n  //     localStorage.setItem(\"contacts\", JSON.stringify(this.props.contacts));\n  //   }\n  // }\n  // addContact = (name, number) => {\n  //   const contact = {\n  //     name: name,\n  //     number: number,\n  //     id: uuidv4(),\n  //   };\n\n  //   this.setState((prevState) => {\n  //     return {\n  //       contacts: [...prevState.contacts, contact],\n  //       showContacts: true,\n  //     };\n  //   });\n  // };\n  // changeFilter = (filter) => {\n  //   this.setState({ filter });\n  // };\n\n  // getFilteredContacts = () => {\n  //   const { contacts, filter } = this.state;\n\n  //   return contacts.filter((contact) =>\n  //     contact.name.toLowerCase().includes(filter.toLowerCase())\n  //   );\n  // };\n  // handleDelete = (id) => {\n  //   this.setState((prevState) => ({\n  //     contacts: prevState.contacts.filter((contact) => contact.id !== id),\n  //   }));\n  // };\n\n  render() {\n    //const { filter, contacts } = this.state;\n\n    //const filteredContacts = this.getFilteredContacts();\n    return (\n      <div>\n        <CSSTransition\n          in={true}\n          appear={true}\n          classNames=\"mainTitle-slideIn\"\n          timeout={5000}\n          unmountOnExit\n        >\n          <MainTitle />\n        </CSSTransition>\n\n        <ContactForm\n        // addContact={this.addContact}\n        // contacts={this.state.contacts}\n        />\n        {/* {this.props.filteredContacts && ( */}\n        <CSSTransition\n          in={this.props.filteredContacts.length >= 1}\n          timeout={250}\n          classNames=\"findContact\"\n          unmountOnExit\n        >\n          {/* {this.props.filteredContacts.length > 0 && ( */}\n          <FindContactInput\n            value={this.props.filter}\n            onChangeFilter={this.changeFilter}\n          />\n          {/* )} */}\n        </CSSTransition>\n        {/* )} */}\n        {/* <CSSTransition in={showContacts} inmountOnExit> */}\n        {/* {this.state.contacts && ( */}\n        <ContactsList\n        // deleteContact={this.handleDelete} contacts={contacts}\n        />\n        {/* )} */}\n        {/* </CSSTransition> */}\n      </div>\n    );\n  }\n}\nconst mapStateToProps = (state) => {\n  const { items, filter } = state.contacts;\n\n  const getfilteredContacts = items.filter((contact) =>\n    contact.name.toLowerCase().includes(filter.toLowerCase())\n  );\n  return {\n    filteredContacts: getfilteredContacts,\n    filter: state.contacts.filter,\n  };\n};\nconst mapDispatchToProps = {\n  onChangeFilter: contactActions.changeFilter,\n};\n//const mapDispatchToProps = {};\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n//export default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\nimport \"./index.css\";\nimport App from \"./components/app/App\";\n\nReactDOM.render(\n  <div>\n    {/* <React.StrictMode> */}\n    <Provider store={store}>\n      <App />\n    </Provider>\n    {/* </React.StrictMode> */}\n  </div>,\n\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}